#include <iostream>
#include <string>
#include <vector>
#include <cmath>
#include <list>

#include "listFunctions.h"

using std::cout;
using std::endl;
using std::sqrt;

/*
void print_list(std::list<int> list, std::list<int>::iterator iter)
{
  // Print the list 
  std::cout << std::string(10, '-') << std::endl;
  for(iter=list.begin(); iter != list.end(); iter++){
    cout << (*iter) <<endl;
  }
}

*/

std::list<int> sieve_list(std::list<int> list, std::list<int>::iterator iter, int square_root)
{
  // Apply Erasthenes Sieve
  std::cout << std::string(10, '-') << std::endl;
  int n = (int) sqrt(square_root); //Square root of square root 
  for(int i=2; i <= n ; i++){
    for(iter=list.begin(); iter !=list.end(); iter++){
      if((*iter) % i == 0 and (*iter) != i){
	 // Remove things that have divisors 
	iter = list.erase(iter);
      }
    }
  }
  return list;
}

int main()
{
  int i; //counter
 
  // Prime to factor 
  // long prime = 600851475153; // Its factor should be 5, 7, 13 , 29 600851475143 
  long prime = 100;
  int square_root = (int) sqrt(prime); 
  
  // First we need to find the primes until square_root
  std::list<int> primes;
  std::list<int>::iterator iter;

  // Create a list with the sqrt(n) primes 
  for(i=2; i <= prime; i++){
    primes.push_back(i);
  }

  print_list(primes, iter);
  primes = sieve_list(primes, iter, square_root);
  print_list(primes, iter);
 
  // print_list(primes, iter);
  int biggest_factor; 
  // Now we test divisibility for the numbers from the biggest to the samllest
  std::cout << std::string(10, '-') << std::endl;
  iter = primes.end();
  while(iter != primes.begin()){
    iter--;
    if(prime % (*iter) == 0){
      biggest_factor = (*iter);
      break; 
    }
  }
  

  cout << biggest_factor << endl;

  return 0;
}
